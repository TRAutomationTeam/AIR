name: AI Code Review

on:
  push:
    paths:
      - 'TR_Sanity_TaxCaddy/**/*.xaml'
  pull_request:
    paths:
      - 'TR_Sanity_TaxCaddy/**/*.xaml'
  workflow_dispatch:

jobs:
  review:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v3
      
    - name: Install CUDA and cuDNN
      run: |
        Write-Host "Installing CUDA and cuDNN..."
        # Download CUDA 11.8 installer
        $cudaUrl = "https://developer.download.nvidia.com/compute/cuda/11.8.0/local_installers/cuda_11.8.0_522.06_windows.exe"
        $cudaInstaller = "cuda_installer.exe"
        Invoke-WebRequest -Uri $cudaUrl -OutFile $cudaInstaller
        
        # Silent install CUDA
        Start-Process -Wait -FilePath .\$cudaInstaller -ArgumentList "-s"
        
        # Add CUDA to PATH
        $env:PATH = "C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.8\bin;$env:PATH"
        Write-Host "CUDA installation complete"
      shell: pwsh

    - name: Install Visual Studio Build Tools
      run: |
        Write-Host "Installing VS Build Tools..."
        $vsUrl = "https://aka.ms/vs/17/release/vs_buildtools.exe"
        $vsInstaller = "vs_buildtools.exe"
        Invoke-WebRequest -Uri $vsUrl -OutFile $vsInstaller
        
        Start-Process -Wait -FilePath .\$vsInstaller -ArgumentList "--quiet", "--wait", "--norestart", "--nocache", `
          "--installPath", "C:\BuildTools", `
          "--add", "Microsoft.VisualStudio.Component.VC.Tools.x86.x64", `
          "--add", "Microsoft.VisualStudio.Component.Windows10SDK.19041"
        Write-Host "VS Build Tools installation complete"
      shell: pwsh

    - name: Setup Ollama
      run: |
        Write-Host "Setting up Ollama..."
        # Download Ollama
        $ollamaUrl = "https://ollama.ai/download/OllamaSetup.exe"
        Invoke-WebRequest -Uri $ollamaUrl -OutFile "OllamaSetup.exe"
        
        # Install Ollama
        Start-Process -Wait -FilePath .\OllamaSetup.exe -ArgumentList "/S"
        
        # Start Ollama service and wait for it to be ready
        Start-Service -Name Ollama
        Start-Sleep -Seconds 10
        
        # Pull required model
        ollama pull codellama:7b-code
        Write-Host "Ollama setup complete"
      shell: pwsh
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install torch==2.1.0 transformers==4.35.0 accelerate==0.24.0 sentencepiece==0.1.99 protobuf==4.24.4
        pip install -r src/requirements.txt

    - name: Configure DNS resolution
      run: |
        Write-Host "Starting enhanced DNS configuration..."
        
        # Remove existing DNS configurations
        Get-DnsClientNrptRule | Remove-DnsClientNrptRule -Force
        Write-Host "Cleared existing DNS rules"
        
        # Configure specific DNS rules for different TR domains
        $rules = @(
            @{
                Namespace = ".thomsonreuters.com"
                Servers = @("10.173.12.233", "10.173.12.234")
            },
            @{
                Namespace = ".int.thomsonreuters.com"
                Servers = @("10.173.12.233", "10.173.12.234")
            },
            @{
                Namespace = ".gcs.int.thomsonreuters.com"
                Servers = @("10.173.12.233", "10.173.12.234")
            }
        )
        
        foreach ($rule in $rules) {
            try {
                Add-DnsClientNrptRule -Namespace $rule.Namespace -NameServers $rule.Servers -ErrorAction Stop
                Write-Host "Added DNS rule for $($rule.Namespace)"
            } catch {
                Write-Host "Warning: Failed to add rule for $($rule.Namespace): $_"
            }
        }
        
        # Configure network adapters
        $adapters = Get-NetAdapter | Where-Object {$_.Status -eq "Up"}
        foreach ($adapter in $adapters) {
            try {
                # Set primary DNS servers
                Set-DnsClientServerAddress -InterfaceIndex $adapter.InterfaceIndex -ServerAddresses @("10.173.12.233", "10.173.12.234", "8.8.8.8", "8.8.4.4") -ErrorAction Stop
                Write-Host "Configured DNS servers for adapter: $($adapter.Name)"
            } catch {
                Write-Host "Warning: Failed to configure DNS for adapter $($adapter.Name): $_"
            }
        }
        
        Write-Host "Flushing DNS cache..."
        ipconfig /flushdns
        
        # Add hosts file entry as fallback
        $hostEntry = "10.173.12.233 aiopenarena.gcs.int.thomsonreuters.com"
        Add-Content -Path "$env:windir\System32\drivers\etc\hosts" -Value $hostEntry -ErrorAction Continue
        Write-Host "Added hosts file entry as fallback"
        
        Write-Host "Verifying DNS configuration..."
        Get-DnsClientServerAddress | Where-Object {$_.InterfaceAlias -notlike "*Loopback*"} | Format-Table -AutoSize
        Get-DnsClientNrptRule | Format-List Namespace, NameServers
        
        Write-Host "Testing domain resolution..."
        $testDomains = @(
            "aiopenarena.gcs.int.thomsonreuters.com",
            "gcs.int.thomsonreuters.com",
            "int.thomsonreuters.com"
        )
        
        foreach ($domain in $testDomains) {
            Write-Host "`nTesting resolution for: $domain"
            try {
                $result = Resolve-DnsName -Name $domain -Type A -Server "10.173.12.233" -ErrorAction Stop
                Write-Host "Successfully resolved using TR DNS: $($result.IPAddress)"
            } catch {
                Write-Host "Failed with TR DNS: $_"
                try {
                    $result = Resolve-DnsName -Name $domain -Type A -Server "8.8.8.8" -ErrorAction Stop
                    Write-Host "Successfully resolved using Google DNS: $($result.IPAddress)"
                } catch {
                    Write-Host "Failed with Google DNS: $_"
                }
            }
        }
        
        # Final validation
        Write-Host "`nFinal connection test..."
        Test-NetConnection -ComputerName aiopenarena.gcs.int.thomsonreuters.com -Port 443 -WarningAction SilentlyContinue
        
    - name: Clean old reports
      run: |
        if (Test-Path "src/AI Reports") {
            Remove-Item -Path "src/AI Reports/*" -Force -Recurse
            Write-Host "Cleaned AI Reports directory"
        }

    - name: Run AI code review
      run: |
        # Enable debug logging
        $env:LOG_LEVEL = "DEBUG"
        # Set DNS timeout
        $env:DNS_TIMEOUT = "30"
        # Run the analysis with fallback mode enabled
        python src/main.py
        
    - name: Upload Analysis Reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: ai-code-review-reports
        path: src/AI Reports/
        if-no-files-found: error
