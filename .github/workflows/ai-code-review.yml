name: AI Code Review

on:
  push:
    paths:
      - 'TR_Sanity_TaxCaddy/**/*.xaml'
  pull_request:
    paths:
      - 'TR_Sanity_TaxCaddy/**/*.xaml'
  workflow_dispatch:

jobs:
  review:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v3
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r src/requirements.txt

    - name: Configure DNS resolution
      run: |
        # Remove any existing DNS rules for the domain
        Get-DnsClientNrptRule | Where-Object {$_.Namespace -eq ".thomsonreuters.com"} | Remove-DnsClientNrptRule -Force
        
        # Configure primary TR DNS servers
        Add-DnsClientNrptRule -Namespace ".thomsonreuters.com" -NameServers "10.173.12.233","10.173.12.234" -ErrorAction Continue
        Write-Host "Added TR DNS servers"
        
        # Add fallback DNS servers
        Set-DnsClientServerAddress -InterfaceIndex (Get-NetAdapter | Where-Object {$_.Status -eq "Up"}).InterfaceIndex -ServerAddresses "10.173.12.233","10.173.12.234","8.8.8.8","8.8.4.4"
        Write-Host "Added fallback DNS servers"
        
        # Clear and display DNS cache
        ipconfig /flushdns
        Write-Host "Flushed DNS cache"
        
        # Verify DNS settings
        Get-DnsClientServerAddress | Format-List
        Get-DnsClientNrptRule | Format-List
        
        # Test DNS resolution multiple times
        Write-Host "Testing DNS resolution..."
        $maxAttempts = 3
        $delaySeconds = 5
        $success = $false
        
        for ($i = 1; $i -le $maxAttempts; $i++) {
            try {
                $result = Resolve-DnsName -Name "aiopenarena.gcs.int.thomsonreuters.com" -Type A -ErrorAction Stop
                Write-Host "DNS resolution successful on attempt $i"
                Write-Host "Resolved IP: $($result.IPAddress)"
                $success = $true
                break
            } catch {
                Write-Host "DNS resolution attempt $i failed: $_"
                if ($i -lt $maxAttempts) {
                    Write-Host "Waiting $delaySeconds seconds before next attempt..."
                    Start-Sleep -Seconds $delaySeconds
                }
            }
        }
        
        # Continue even if DNS fails - we have local fallback
        
    - name: Clean old reports
      run: |
        if (Test-Path "src/AI Reports") {
            Remove-Item -Path "src/AI Reports/*" -Force -Recurse
            Write-Host "Cleaned AI Reports directory"
        }

    - name: Run AI code review
      run: |
        # Enable debug logging
        $env:LOG_LEVEL = "DEBUG"
        # Set DNS timeout
        $env:DNS_TIMEOUT = "30"
        # Run the analysis with fallback mode enabled
        python src/main.py
        
    - name: Upload Analysis Reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: ai-code-review-reports
        path: src/AI Reports/
        if-no-files-found: error
