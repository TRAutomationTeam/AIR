name: AI Code Review

on:
  push:
    paths:
      - 'TR_Sanity_TaxCaddy/**/*.xaml'
  pull_request:
    paths:
      - 'TR_Sanity_TaxCaddy/**/*.xaml'

jobs:
  review:
    runs-on: self-hosted
    env:
      GITHUB_WORKSPACE: D:/w
      EXTRACT_PATH: D:/w/ext
    steps:
      - name: Setup 7-Zip
        shell: pwsh
        run: |
          $7zipUrl = "https://www.7-zip.org/a/7z2301-x64.exe"
          $7zipInstaller = "$env:TEMP\7z2301-x64.exe"
          Invoke-WebRequest -Uri $7zipUrl -OutFile $7zipInstaller
          Start-Process -FilePath $7zipInstaller -Args "/S" -Wait
          $env:PATH = "C:\Program Files\7-Zip;$env:PATH"

      - name: Prepare Workspace
        shell: pwsh
        run: |
          # Create short workspace directory
          New-Item -ItemType Directory -Force -Path "D:/w" | Out-Null
          New-Item -ItemType Directory -Force -Path "D:/w/ext" | Out-Null
          
          # Enable long paths in Windows and registry
          try {
            if (-not (Test-Path "HKLM:\SYSTEM\CurrentControlSet\Control\FileSystem")) {
              New-Item -Path "HKLM:\SYSTEM\CurrentControlSet\Control\FileSystem" -Force | Out-Null
            }
            Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\FileSystem" -Name "LongPathsEnabled" -Value 1 -Type DWord -Force
            Write-Host "Enabled long paths in Windows registry"
          } catch {
            Write-Warning "Could not enable long paths in registry: $_"
          }

      - name: Configure Git Long Paths
        shell: pwsh
        run: |
          Write-Host "Searching for Git installation..."
          $gitPaths = @(
            "C:\Program Files\Git\cmd\git.exe",
            "C:\Program Files (x86)\Git\cmd\git.exe",
            "$env:PROGRAMFILES\Git\cmd\git.exe",
            "$env:LOCALAPPDATA\Programs\Git\cmd\git.exe",
            "C:\actions\git\Git\cmd\git.exe"
          )
          
          $gitExe = $null
          foreach ($path in $gitPaths) {
            if (Test-Path $path) {
              $gitExe = $path
              Write-Host "Found Git at: $gitExe"
              break
            }
          }
          
          if (-not $gitExe) {
            Write-Host "Checking system Git..."
            $gitExe = (Get-Command git -ErrorAction SilentlyContinue).Source
          }
          
          if (-not $gitExe) {
            Write-Error "Git not found in any standard location"
            exit 1
          }
          
          Write-Host "Configuring Git long paths..."
          try {
            # Try to enable long paths directly in the registry first
            if (-not (Test-Path "HKLM:\SYSTEM\CurrentControlSet\Control\FileSystem")) {
              New-Item -Path "HKLM:\SYSTEM\CurrentControlSet\Control\FileSystem" -Force | Out-Null
            }
            Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\FileSystem" -Name "LongPathsEnabled" -Value 1 -Type DWord -Force
            Write-Host "Enabled long paths in Windows registry"
            
            # Configure Git to handle long paths
            & $gitExe config --system core.longpaths true
            if ($LASTEXITCODE -ne 0) {
              throw "Git config failed with exit code $LASTEXITCODE"
            }
            Write-Host "Git long paths configured successfully"
          } catch {
            Write-Warning "Could not configure Git long paths: $_"
            Write-Host "Continuing anyway as this might not be critical..."
          }
          
      - name: Download Repository
        shell: pwsh
        run: |
          # Ignore module import errors
          $ErrorActionPreference = 'SilentlyContinue'
          Import-Module \helpers\chocolateyProfile.psm1
          $ErrorActionPreference = 'Stop'
          
          try {
            $headers = @{
              'Authorization' = "Bearer ${{ secrets.GITHUB_TOKEN }}"
              'Accept' = 'application/vnd.github.v3.raw'
            }
            
            $downloadUrl = "https://api.github.com/repos/${{ github.repository }}/tarball/${{ github.sha }}"
            $archivePath = "D:/w/repo.tar.gz"
            $tempPath = "D:/w/temp"
            $extractPath = "D:/w/ext"
            
            # Create temp directory
            New-Item -ItemType Directory -Force -Path $tempPath | Out-Null
            New-Item -ItemType Directory -Force -Path $extractPath | Out-Null
            
            Write-Host "Downloading repository archive..."
            Invoke-WebRequest -Uri $downloadUrl -Headers $headers -OutFile $archivePath
            
            Write-Host "Extracting .gz archive..."
            & "C:\Program Files\7-Zip\7z.exe" x "$archivePath" -o"$tempPath" -y
            if ($LASTEXITCODE -ne 0) { throw "Failed to extract .gz archive" }
            
            $tarFile = Get-ChildItem $tempPath -Filter "*.tar" | Select-Object -First 1
            if (-not $tarFile) { throw "Could not find .tar file after extracting .gz" }
            
            Write-Host "Extracting .tar archive..."
            & "C:\Program Files\7-Zip\7z.exe" x $tarFile.FullName -o"$extractPath" -y
            if ($LASTEXITCODE -ne 0) { throw "Failed to extract .tar archive" }
            
            # Find the repository directory (should be the only directory)
            $extractedDir = Get-ChildItem $extractPath -Directory | Select-Object -First 1
            if ($extractedDir) {
              Write-Host "Moving files from $($extractedDir.FullName) to D:/w"
              Get-ChildItem $extractedDir.FullName | ForEach-Object {
                Write-Host "Moving $_..."
                Move-Item -Path $_.FullName -Destination "D:/w" -Force
              }
            } else {
              throw "Could not find extracted directory in $extractPath"
            }
            
            # Cleanup
            Write-Host "Cleaning up temporary files..."
            Remove-Item -Path $tempPath -Recurse -Force
            Remove-Item -Path $extractPath -Recurse -Force
            Remove-Item -Path $archivePath -Force
          } catch {
            Write-Error "Repository download/extraction failed: $_"
            exit 1
          }

      - name: Extract if needed
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          try {
            if (Test-Path "${{ github.workspace }}/*.tar.gz") {
              $extractPath = "D:/wrk"
              Write-Host "Creating extraction directory at $extractPath"
              New-Item -ItemType Directory -Path $extractPath -Force
              
              Write-Host "Enabling long path support in Windows..."
              try {
                # Try to enable long path support in Windows registry
                if (-not (Test-Path "HKLM:\SYSTEM\CurrentControlSet\Control\FileSystem")) {
                  New-Item -Path "HKLM:\SYSTEM\CurrentControlSet\Control\FileSystem" -Force
                }
                Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\FileSystem" -Name "LongPathsEnabled" -Value 1 -Type DWord -ErrorAction Stop
              } catch {
                Write-Warning "Could not enable long paths in Windows registry. Continuing anyway: $_"
              }
              
              Write-Host "Extracting archive..."
              $archivePath = (Get-Item "${{ github.workspace }}/*.tar.gz").FullName
              Write-Host "Archive path: $archivePath"
              & "C:\Program Files\7-Zip\7z.exe" x "$archivePath" -o"$extractPath" -y
              if ($LASTEXITCODE -ne 0) { 
                throw "7-Zip extraction failed with exit code $LASTEXITCODE" 
              }
              
              Write-Host "Moving extracted files..."
              Get-ChildItem $extractPath -Force | ForEach-Object {
                Write-Host "Moving $_..."
                Move-Item -Path $_.FullName -Destination ${{ github.workspace }} -Force
              }
            } else {
              Write-Host "No .tar.gz files found in workspace"
            }
          }
          catch {
            Write-Error "Extraction failed: $_"
            throw
          }

      - name: Setup Python Environment
        shell: pwsh
        run: |
          Write-Host "Detecting Python installation..."
          
          function Get-PythonVersionNumber {
            param([string]$Version)
            if ($Version -match '(\d+\.\d+\.\d+)') {
              return [version]$matches[1]
            }
            return $null
          }
          
          function Test-PythonVersion {
            param([string]$PythonPath)
            try {
              $versionOutput = & $PythonPath --version 2>&1
              $version = Get-PythonVersionNumber $versionOutput
              if ($version -and $version -ge [version]"3.8.0") {
                return $true
              }
            } catch { }
            return $false
          }
          
          # Find all potential Python installations
          $pythonLocations = @(
            "C:\Python*\python.exe",
            "C:\Program Files\Python*\python.exe",
            "C:\Program Files (x86)\Python*\python.exe",
            "$env:LOCALAPPDATA\Programs\Python\Python*\python.exe",
            "$env:PROGRAMFILES\Python*\python.exe"
          )
          
          $pythonExe = $null
          $foundVersion = $null
          
          # First try system Python
          Write-Host "Checking system Python..."
          $systemPython = (Get-Command python -ErrorAction SilentlyContinue).Source
          if ($systemPython -and (Test-PythonVersion $systemPython)) {
            $pythonExe = $systemPython
            $foundVersion = & $pythonExe --version
            Write-Host "Found suitable system Python: $foundVersion"
          }
          
          # If system Python not found or not suitable, search other locations
          if (-not $pythonExe) {
            Write-Host "Searching for Python installations..."
            foreach ($pattern in $pythonLocations) {
              Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | 
              Sort-Object -Property FullName -Descending | 
              ForEach-Object {
                if (-not $pythonExe -and (Test-PythonVersion $_.FullName)) {
                  $pythonExe = $_.FullName
                  $foundVersion = & $pythonExe --version
                  Write-Host "Found suitable Python at $pythonExe : $foundVersion"
                  break
                }
              }
              if ($pythonExe) { break }
            }
          }
          
          if (-not $pythonExe) {
            Write-Error "No suitable Python installation found (requires Python 3.8 or higher)"
            exit 1
          }
          
          # Add Python to PATH
          $pythonDir = Split-Path -Parent $pythonExe
          $env:Path = "$pythonDir;$pythonDir\Scripts;$env:Path"
          
          # Create virtual environment
          Write-Host "Creating virtual environment..."
          $venvPath = "D:/w/venv"
          & $pythonExe -m venv $venvPath
          
          # Activate virtual environment
          $activateScript = "$venvPath\Scripts\Activate.ps1"
          if (Test-Path $activateScript) {
            . $activateScript
            Write-Host "Virtual environment activated"
          } else {
            Write-Error "Failed to create virtual environment"
            exit 1
          }
          
          # Upgrade pip in virtual environment
          Write-Host "Upgrading pip..."
          python -m pip install --upgrade pip
          
          Write-Host "Python setup complete using $foundVersion"

      - name: Install Dependencies
        shell: pwsh
        run: |
          Write-Host "Installing Python dependencies..."
          $requirementsFile = "D:/w/src/requirements.txt"
          
          if (Test-Path $requirementsFile) {
            Write-Host "Found requirements.txt at $requirementsFile"
            python -m pip install -r $requirementsFile --no-cache-dir
            if ($LASTEXITCODE -ne 0) {
              Write-Error "Failed to install dependencies from requirements.txt"
              exit 1
            }
          } else {
            Write-Warning "requirements.txt not found at $requirementsFile"
            # Install minimum required packages
            python -m pip install requests pandas openpyxl --no-cache-dir
          }

      - name: Set environment variables
        env:
          AI_ARENA_API_KEY: ${{ secrets.AI_ARENA_API_KEY }}
          AI_ARENA_ENDPOINT: ${{ secrets.AI_ARENA_ENDPOINT }}
        run: echo "Environment variables set"

      - name: Run AI code review
        run: python src/main.py

      - name: Upload AI code review reports
        uses: actions/upload-artifact@v4
        with:
          name: ai-code-review-reports
          path: |
            src/AI Reports/*.html
            src/AI Reports/*.json
