name: AI Code Review

on:
  push:
    paths:
      - 'TR_Sanity_TaxCaddy/**/*.xaml'
  pull_request:
    paths:
      - 'TR_Sanity_TaxCaddy/**/*.xaml'
  workflow_dispatch:

jobs:
  review:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v3
      
    - name: System Check
      run: |
        Write-Host "Checking system requirements..."
        
        # Check system resources
        $memory = (Get-CimInstance Win32_ComputerSystem).TotalPhysicalMemory / 1GB
        $cpuCores = (Get-CimInstance Win32_ComputerSystem).NumberOfLogicalProcessors
        
        Write-Host "System Memory: $([math]::Round($memory, 2)) GB"
        Write-Host "CPU Cores: $cpuCores"
        
        # Check if we have enough resources for the model
        if ($memory -lt 8) {
            Write-Warning "Low memory detected. Performance might be affected."
        }
        
        # Check for GPU (informational only)
        $hasNvidiaGPU = Get-WmiObject Win32_VideoController | Where-Object { $_.Name -match 'NVIDIA' }
        if ($hasNvidiaGPU) {
            Write-Host "NVIDIA GPU detected: $($hasNvidiaGPU.Name)"
        } else {
            Write-Host "No GPU detected. Using CPU mode."
        }
      shell: pwsh

    - name: Cache Ollama Model
      id: cache-ollama
      uses: actions/cache@v3
      with:
        path: |
          ~/.ollama/models
          OllamaSetup.exe
        key: ollama-codellama-3b-${{ runner.os }}
        restore-keys: |
          ollama-codellama-3b-

    - name: Setup Ollama
      run: |
        Write-Host "Setting up Ollama..."
        $maxWaitMinutes = 15  # Increased timeout to 15 minutes for slower networks
        $setupTimeout = (Get-Date).AddMinutes($maxWaitMinutes)
        Write-Host "Setup will timeout at: $($setupTimeout.ToString('HH:mm:ss'))"
        
        # Download Ollama if not cached
        if (-not (Test-Path "OllamaSetup.exe")) {
            Write-Host "Downloading Ollama..."
            $ollamaUrl = "https://ollama.ai/download/OllamaSetup.exe"
            try {
                $wc = New-Object System.Net.WebClient
                $wc.DownloadFile($ollamaUrl, "OllamaSetup.exe")
            } catch {
                Write-Error "Failed to download Ollama: $_"
                exit 1
            }
        } else {
            Write-Host "Using cached Ollama installer"
        }
        
        # Install Ollama with timeout
        Write-Host "Installing Ollama..."
        $process = Start-Process -FilePath .\OllamaSetup.exe -ArgumentList "/S" -PassThru
        $timeoutSeconds = 300
        if (-not $process.WaitForExit($timeoutSeconds * 1000)) {
            Write-Error "Ollama installation timed out after $timeoutSeconds seconds"
            Stop-Process -Id $process.Id -Force
            exit 1
        }
        if ($process.ExitCode -ne 0) {
            Write-Error "Ollama installation failed with exit code $($process.ExitCode)"
            exit 1
        }
        
        # Start and verify Ollama service
        Write-Host "Starting Ollama service..."
        Start-Service -Name Ollama
        $retryCount = 0
        $maxRetries = 6
        $serviceStarted = $false
        
        while ($retryCount -lt $maxRetries) {
            $service = Get-Service -Name Ollama -ErrorAction SilentlyContinue
            if ($service.Status -eq 'Running') {
                $serviceStarted = $true
                break
            }
            Write-Host "Waiting for Ollama service to start... Attempt $($retryCount + 1) of $maxRetries"
            Start-Sleep -Seconds 10
            $retryCount++
        }
        
        if (-not $serviceStarted) {
            Write-Error "Failed to start Ollama service after $maxRetries attempts"
            exit 1
        }
        
        # Create Ollama models directory if it doesn't exist
        $ollamaModelsDir = "$env:USERPROFILE\.ollama\models"
        if (-not (Test-Path $ollamaModelsDir)) {
            New-Item -Path $ollamaModelsDir -ItemType Directory -Force
        }

        # Check if model is already in cache
        $modelFiles = Get-ChildItem -Path $ollamaModelsDir -Filter "codellama*"
        if ($modelFiles.Count -eq 0) {
            Write-Host "Pulling smaller CodeLlama model (3B variant)..."
            $startTime = Get-Date
            
            # Start download with progress monitoring
            $job = Start-Job -ScriptBlock {
                $processInfo = New-Object System.Diagnostics.ProcessStartInfo
                $processInfo.FileName = "ollama"
                $processInfo.Arguments = "pull codellama:3b"
                $processInfo.RedirectStandardOutput = $true
                $processInfo.RedirectStandardError = $true
                $processInfo.UseShellExecute = $false
                
                $process = New-Object System.Diagnostics.Process
                $process.StartInfo = $processInfo
                $process.Start() | Out-Null
                
                while (-not $process.StandardOutput.EndOfStream) {
                    $line = $process.StandardOutput.ReadLine()
                    if ($line -match "(\d+\.\d+)%") {
                        $progress = [math]::Round([double]$matches[1], 2)
                        $elapsed = [math]::Round(((Get-Date) - $using:startTime).TotalMinutes, 1)
                        Write-Output "Progress: $progress% (${elapsed} minutes elapsed)"
                    }
                }
                $process.WaitForExit()
                return $process.ExitCode
            }
            
            # Monitor progress with timeout
            while (-not $job.HasMoreData -and (Get-Date) -lt $setupTimeout) {
                $output = Receive-Job -Job $job
                if ($output) {
                    Write-Host $output
                }
                
                # Show remaining time
                $remainingMinutes = [math]::Round(($setupTimeout - (Get-Date)).TotalMinutes, 1)
                if ($remainingMinutes -gt 0) {
                    Write-Host "Time remaining before timeout: $remainingMinutes minutes"
                }
                
                Start-Sleep -Seconds 30  # Update status every 30 seconds
            }
            
            # Get final status
            $exitCode = Receive-Job -Job $job -Wait
            Remove-Job -Job $job
            
            if ($exitCode -ne 0) {
                Write-Error "Model download failed with exit code $exitCode"
                exit 1
            }
            
            $totalTime = [math]::Round(((Get-Date) - $startTime).TotalMinutes, 1)
            Write-Host "Download completed in $totalTime minutes"
            
            if ($pullProcess.ExitCode -ne 0) {
                Write-Error "Model pull failed with exit code $($pullProcess.ExitCode)"
                Get-Content "ollama_pull.log"
                exit 1
            }
        } else {
            Write-Host "Using cached CodeLlama model"
        }
        
        # Verify Ollama is working
        Write-Host "Verifying Ollama installation..."
        $testResult = ollama list
        if ($LASTEXITCODE -ne 0 -or -not ($testResult -match "codellama")) {
            Write-Error "Ollama verification failed. Model not found in list: $testResult"
            exit 1
        }
        
        Write-Host "Ollama setup completed successfully"
      shell: pwsh
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Setup Python Environment
      run: |
        Write-Host "Setting up Python environment..."
        
        # Upgrade pip
        python -m pip install --upgrade pip
        
        # Install only required packages (removed ML packages since Ollama handles that)
        Write-Host "Installing Python dependencies..."
        pip install -r src/requirements.txt
        
        # Verify installations
        Write-Host "Verifying Python packages..."
        pip list

    - name: Configure DNS resolution
      run: |
        Write-Host "Starting enhanced DNS configuration..."
        
        # Remove existing DNS configurations
        Get-DnsClientNrptRule | Remove-DnsClientNrptRule -Force
        Write-Host "Cleared existing DNS rules"
        
        # Configure specific DNS rules for different TR domains
        $rules = @(
            @{
                Namespace = ".thomsonreuters.com"
                Servers = @("10.173.12.233", "10.173.12.234")
            },
            @{
                Namespace = ".int.thomsonreuters.com"
                Servers = @("10.173.12.233", "10.173.12.234")
            },
            @{
                Namespace = ".gcs.int.thomsonreuters.com"
                Servers = @("10.173.12.233", "10.173.12.234")
            }
        )
        
        foreach ($rule in $rules) {
            try {
                Add-DnsClientNrptRule -Namespace $rule.Namespace -NameServers $rule.Servers -ErrorAction Stop
                Write-Host "Added DNS rule for $($rule.Namespace)"
            } catch {
                Write-Host "Warning: Failed to add rule for $($rule.Namespace): $_"
            }
        }
        
        # Configure network adapters
        $adapters = Get-NetAdapter | Where-Object {$_.Status -eq "Up"}
        foreach ($adapter in $adapters) {
            try {
                # Set primary DNS servers
                Set-DnsClientServerAddress -InterfaceIndex $adapter.InterfaceIndex -ServerAddresses @("10.173.12.233", "10.173.12.234", "8.8.8.8", "8.8.4.4") -ErrorAction Stop
                Write-Host "Configured DNS servers for adapter: $($adapter.Name)"
            } catch {
                Write-Host "Warning: Failed to configure DNS for adapter $($adapter.Name): $_"
            }
        }
        
        Write-Host "Flushing DNS cache..."
        ipconfig /flushdns
        
        # Add hosts file entry as fallback
        $hostEntry = "10.173.12.233 aiopenarena.gcs.int.thomsonreuters.com"
        Add-Content -Path "$env:windir\System32\drivers\etc\hosts" -Value $hostEntry -ErrorAction Continue
        Write-Host "Added hosts file entry as fallback"
        
        Write-Host "Verifying DNS configuration..."
        Get-DnsClientServerAddress | Where-Object {$_.InterfaceAlias -notlike "*Loopback*"} | Format-Table -AutoSize
        Get-DnsClientNrptRule | Format-List Namespace, NameServers
        
        Write-Host "Testing domain resolution..."
        $testDomains = @(
            "aiopenarena.gcs.int.thomsonreuters.com",
            "gcs.int.thomsonreuters.com",
            "int.thomsonreuters.com"
        )
        
        foreach ($domain in $testDomains) {
            Write-Host "`nTesting resolution for: $domain"
            try {
                $result = Resolve-DnsName -Name $domain -Type A -Server "10.173.12.233" -ErrorAction Stop
                Write-Host "Successfully resolved using TR DNS: $($result.IPAddress)"
            } catch {
                Write-Host "Failed with TR DNS: $_"
                try {
                    $result = Resolve-DnsName -Name $domain -Type A -Server "8.8.8.8" -ErrorAction Stop
                    Write-Host "Successfully resolved using Google DNS: $($result.IPAddress)"
                } catch {
                    Write-Host "Failed with Google DNS: $_"
                }
            }
        }
        
        # Final validation
        Write-Host "`nFinal connection test..."
        Test-NetConnection -ComputerName aiopenarena.gcs.int.thomsonreuters.com -Port 443 -WarningAction SilentlyContinue
        
    - name: Clean old reports
      run: |
        if (Test-Path "src/AI Reports") {
            Remove-Item -Path "src/AI Reports/*" -Force -Recurse
            Write-Host "Cleaned AI Reports directory"
        }

    - name: Run AI code review
      run: |
        # Enable debug logging
        $env:LOG_LEVEL = "DEBUG"
        # Set DNS timeout
        $env:DNS_TIMEOUT = "30"
        # Run the analysis with fallback mode enabled
        python src/main.py
        
    - name: Upload Analysis Reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: ai-code-review-reports
        path: src/AI Reports/
        if-no-files-found: error
